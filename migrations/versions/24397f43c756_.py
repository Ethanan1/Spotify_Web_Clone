"""empty message

Revision ID: bb7c29f358b5
Revises:
Create Date: 2023-05-13 10:36:02.245881

"""
from alembic import op
import sqlalchemy as sa

import os
environment = os.getenv("FLASK_ENV")
SCHEMA = os.environ.get("SCHEMA")


# revision identifiers, used by Alembic.
revision = 'bb7c29f358b5'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('albums',
    # sa.Column('user_id', sa.Integer(), nullable=False),
    # )
    # if environment == "production":
    #     op.execute(f"ALTER TABLE albums SET SCHEMA {SCHEMA};")
    # # ### end Alembic commands ###qqqqqqqqq
    # op.create_table('songs',
    # sa.Column('user_id', sa.Integer(), nullable=True),
    # )
    if environment == "production":
        op.execute(f"ALTER TABLE songs SET SCHEMA {SCHEMA};")
    # ### end Alembic commands ###qqqqqqqqq
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=40), nullable=False),
    sa.Column('first_name', sa.String(length=255), nullable=False),
    sa.Column('last_name', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('cover_photo_url', sa.String(length=255), nullable=True),
    sa.Column('theme', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    # if environment == "production":
    #     op.execute(f"ALTER TABLE users SET SCHEMA {SCHEMA};")
    # # ### end Alembic commands ###qqqqqqqqq
    # op.create_table('follows',
    # sa.Column('id', sa.Integer(), nullable=False),
    # sa.Column('user_id', sa.Integer(), nullable=True),
    # sa.Column('follow_id', sa.Integer(), nullable=True),
    # sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    # sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    # sa.ForeignKeyConstraint(['follow_id'], ['users.id'], ),
    # sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    # sa.PrimaryKeyConstraint('id')
    # )
    if environment == "production":
        op.execute(f"ALTER TABLE follows SET SCHEMA {SCHEMA};")
    # ### end Alembic commands ###qqqqqqqqq
    op.create_table('playlists',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('cover_photo_url', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # if environment == "production":
    #     op.execute(f"ALTER TABLE playlists SET SCHEMA {SCHEMA};")
    # # ### end Alembic commands ###qqqqqqqqq
    # # op.create_table('queued',
    # # sa.Column('id', sa.Integer(), nullable=False),
    # # sa.Column('user_id', sa.Integer(), nullable=False),
    # # sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    # # sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    # # sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    # # sa.PrimaryKeyConstraint('id')
    # # )
    # # if environment == "production":
    # #     op.execute(f"ALTER TABLE queued SET SCHEMA {SCHEMA};")
    # # ### end Alembic commands ###qqqqqqqqq
    # # op.create_table('likes',
    # # sa.Column('id', sa.Integer(), nullable=False),
    # # sa.Column('user_id', sa.Integer(), nullable=False),
    # # sa.Column('song_id', sa.Integer(), nullable=True),
    # # sa.Column('album_id', sa.Integer(), nullable=True),
    # # sa.Column('playlist_id', sa.Integer(), nullable=True),
    # # sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    # # sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    # # sa.ForeignKeyConstraint(['album_id'], ['albums.id'], ),
    # # sa.ForeignKeyConstraint(['playlist_id'], ['playlists.id'], ),
    # # sa.ForeignKeyConstraint(['song_id'], ['songs.id'], ),
    # # sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    # # sa.PrimaryKeyConstraint('id')
    # # )
    # # if environment == "production":
    # #     op.execute(f"ALTER TABLE likes SET SCHEMA {SCHEMA};")
    # # ### end Alembic commands ###qqqqqqqqq
    # op.create_table('playlist_songs',
    # sa.Column('playlist_id', sa.Integer(), nullable=False),
    # sa.Column('song_id', sa.Integer(), nullable=False),
    # sa.ForeignKeyConstraint(['playlist_id'], ['playlists.id'], ),
    # sa.ForeignKeyConstraint(['song_id'], ['songs.id'], ),
    # sa.PrimaryKeyConstraint('playlist_id', 'song_id')
    # )
    # if environment == "production":
    #     op.execute(f"ALTER TABLE playlist_songs SET SCHEMA {SCHEMA};")
    # # ### end Alembic commands ###qqqqqqqqq
    # # op.create_table('queued_songs',
    # # sa.Column('queued_id', sa.Integer(), nullable=False),
    # # sa.Column('song_id', sa.Integer(), nullable=False),
    # # sa.ForeignKeyConstraint(['queued_id'], ['queued.id'], ),
    # # sa.ForeignKeyConstraint(['song_id'], ['songs.id'], ),
    # # sa.PrimaryKeyConstraint('queued_id', 'song_id')
    # # )
    # # if environment == "production":
    # #     op.execute(f"ALTER TABLE queued_songs SET SCHEMA {SCHEMA};")
    # # ### end Alembic commands ###qqqqqqqqq
    # # ### end Alembic commands ###



def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_table('queued_songs')
    # op.drop_table('playlist_songs')
    # op.drop_table('likes')
    # op.drop_table('queued')
    # op.drop_table('playlists')
    # op.drop_table('follows')
    op.drop_table('users')
    # op.drop_table('songs')
    # op.drop_table('albums')
    # ### end Alembic commands ###
